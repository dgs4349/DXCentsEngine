

////////// old initialize ///////////////

soundEngine->Init();
// loading audio here for now
bgIntro = soundEngine->CreateSound(L"Assets/Audio/audio_background_intro.wav");
bgLoop = soundEngine->CreateSound(L"Assets/Audio/audio_background_loop.wav", true);
bgIntro->Link(bgLoop);
bgIntro->Set(0.35f);

Sound::RTPCParams* introParams = bgIntro->CreateRTPCParams();

bgIntro->Bind(introParams->pitch, &ropeSpeed, -0.01f, 0.75f, startRopeSpeed, speedIncreaseMax);

menuIntro = soundEngine->CreateSound(L"Assets/Audio/audio_menu_intro.wav");
menuLoop = soundEngine->CreateSound(L"Assets/Audio/audio_menu_loop.wav", true);
menuIntro->Link(menuLoop);
menuIntro->Set(menuVolume);
menuIntro->PlayOnUpdate();

jumpSfx.push_back(soundEngine->CreateSound(L"Assets/Audio/sfx/jump_0.wav"));
jumpSfx.push_back(soundEngine->CreateSound(L"Assets/Audio/sfx/jump_1.wav"));
jumpSfx.push_back(soundEngine->CreateSound(L"Assets/Audio/sfx/jump_2.wav"));
jumpSfx.push_back(soundEngine->CreateSound(L"Assets/Audio/sfx/jump_3.wav"));
for (int i = 0; i < jumpSfx.size(); i++) jumpSfx[i]->Set(0.5f, 0.0f, 0.95f);


//////////////// new initialize /////////////////


// json literal string format
Scene game = new Scene(R"(
	{
		"background": SoundContainer({
			"files": {
				L"Assets/Audio/audio_background_intro.wav",
				L"Assets/Audio/audio_background_loop.wav"
			}
			"volume": 0.35f,
			"effects": {
				new Effect(
					Effects.Volume(-0.0f, 0.75f), 
					Connect(&ropeSpeed, startRopeSpeed, speedIncreaseMax)
				),
			}
			"OnComplete": Effects.Container.LoopLast(),
		}),

		"OnStart": "background",
	}
)"_json);

// json struct format
Scene menu = new Scene({
	{"background", ""}
});

// or this could be in a scene
SoundContainer* SFX = new SoundContainer({
	{"jump", 
		{"files", L"Assets/Audio/sfx/jump_||n=0; n<4; n++||.wav"}, // schema parser
		{"volume", 0.5f},
		{"pan", 0.95f},
		{"order", "sequential"}
	}
});

SFX["jump"].Play(); //goal, one offs invoked without member play?